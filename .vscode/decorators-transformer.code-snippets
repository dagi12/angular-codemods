{
	"Decorators Transformer with JSCodeShift": {
		"prefix": "dtra",
		"body": [
			"import {",
			"  API,",
			"  ASTPath,",
			"  Collection,",
			"  FileInfo,",
			"  JSCodeshift,",
			"  Options",
			"} from \"jscodeshift\";",
			"import { myPlugin } from \"../shared/collection-ext\";",
			"import { assertCodeSize, initialConditions } from \"../shared/search-util\";",
			"",
			"let j: JSCodeshift;",
			"",
			"const defaultQueryResults = {};",
			"",
			"function queryForResults(root: Collection, initNode: Collection) {",
			"  const queryResults = { ...defaultQueryResults };",
			"",
			"  root.safeImportInsert(j.identifier(\"$1\"), \"$2\");",
			"",
			"  initNode.find(j.$6, {",
			"",
			"  });",
			"  return queryResults;",
			"}",
			"",
			"function buildClass(replacePath: ASTPath<any>, queryResult: typeof defaultQueryResults) {",
			"",
			"   ",
			"}",
			"",
			"export default function transformer(",
			"  fileInfo: FileInfo,",
			"  api: API,",
			"  options: Options",
			") {",
			"  j = api.jscodeshift;",
			"  j.use(myPlugin);",
			"  const root = j(fileInfo.source);",
			"  const rootExports = root.find(j.ExportNamedDeclaration);",
			"",
			"  const initialNode = rootExports",
			"    .find(j.$4, {",
			"      ",
			"    })",
			"",
			"  const {",
			"    beginCount,",
			"    beginLn,",
			"    initialNode,",
			"  } = initialConditions(",
			"    fileInfo,",
			"    root,",
			"    $5,",
			"    initialNode",
			"  );",
			"  if (!initialNode) {",
			"    return;",
			"  }",
			"",
			"  const queryResults = queryForResults(root, initialNode);",
			"",
			"  initialNode.replaceWith((p) => buildClass(p, queryResults));",
			"",
			"  assertCodeSize(beginLn, beginCount, j, root, options);",
			"  return root.toSource();",
			"}",
			""
		],
		"description": "Decorators Transformer with JSCodeShift"
	}
}